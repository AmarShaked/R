{"name":"Requests","tagline":"HTTP library for easy Requests in Go language","body":"# requests\r\nHTTP library for Go language\r\n## Getting Started\r\n\r\n### Make a Request\r\nMaking a request with Requests is very simple.\r\nBegin by installing the Requests package.\r\n~~~ go\r\ngo get github.com/AmarShaked/requests\r\nimport \"github.com/AmarShaked/requests\"\r\n~~~\r\nNow, let’s try to get a webpage. For this example, let’s get GitHub’s public timeline\r\n~~~ go\r\nr, _ := requests.Get('https://api.github.com/events')\r\n~~~\r\nNow, we have a Response (not a regular http.Response) object called r. We can get all the information we need from this object.\r\nFor example:\r\n~~~ go\r\nr.StatusCode // 200\r\nr.Text() // Get the response body as string\r\nr.Json(&jsonObject) // Parse the json data and stores the result in the value pointed to by jsonObject.\r\nr.Headers('content-type') // 'application/json'\r\nr.Cookies('key') // Return a cookie value as string\r\n~~~\r\n### Quick requests\r\nYou can send a quick requests of all HTTP requests types.\r\n\r\nGET, HEAD, OPTIONS are the easiest:\r\n~~~ go\r\nr, _ := requests.Get('http://httpbin.org/get')\r\nr, _ := requests.Options('http://httpbin.org/get')\r\nr, _ := requests.Head('http://httpbin.org/get')\r\n~~~\r\n\r\nPOST, PUT, DELETE Usually contain form data:\r\n~~~ go\r\ndata := map[string]string{\"test\": \"shaked\", \"test2\": \"shaked2\"} // \"form\": {\"test\": \"shaked\",\"test2\": \"shaked2\"}\r\nr, _ := requests.Post('http://httpbin.org/post', data)\r\nr, _ := requests.Put('http://httpbin.org/put', data)\r\nr, _ := requests.Delete('http://httpbin.org/delete', data)\r\n~~~","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}